class JSGenerator:
    COMPONENT_TEMPLATE = """
// Generated by Pvelte
const %s = () => {
    %s  // States
    %s  // Functions
    
    return {
        mount: (target) => {
            const template = `%s`;
            target.innerHTML = template;
            
            // Setup event listeners
            %s
            
            // Setup state subscriptions
            %s
        }
    };
};
"""

    def generate_event_listeners(self, template: str, functions: dict) -> str:
        """Generate event listener setup code for all functions used in the template."""
        listeners = []
        for func_name in functions:
            # Find all elements with this function as onclick handler
            listeners.append(f"""
            const {func_name}Buttons = target.querySelectorAll(`[data-onclick="{func_name}"]`);
            {func_name}Buttons.forEach(button => {{
                button.addEventListener('click', {func_name});
            }});
            """)
        return '\n'.join(listeners)

    def generate_state_subscriptions(self, states: dict) -> str:
        """Generate subscription setup code for all states."""
        subscriptions = []
        for state_name in states:
            subscriptions.append(f"""
            {state_name}.subscribe(value => {{
                target.querySelectorAll('[data-bind="{state_name}"]').forEach(el => {{
                    el.textContent = value;
                }});
            }});
            """)
        return '\n'.join(subscriptions)

    def generate_component(self, name: str, states: str, functions: str, 
                         template: str, state_names: list, function_dict: dict) -> str:
        event_listeners = self.generate_event_listeners(template, function_dict)
        state_subscriptions = self.generate_state_subscriptions(dict.fromkeys(state_names))
        
        return self.COMPONENT_TEMPLATE % (
            name, states, functions, template, event_listeners, state_subscriptions
        )